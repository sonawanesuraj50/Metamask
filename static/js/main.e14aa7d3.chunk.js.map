{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","web3","useEffect","a","detectEthereumProvider","Web3","window","ethereum","currentProvider","on","eth","getAccounts","accounts","setAccounts","console","warn","useState","chainid","setChainId","getBalance","SetGetBalanced","metamaskConnect","request","method","account","getChainId","log","metaMaskDissconnect","_handleDisconnect","localStorage","clear","location","reload","getBalanced","balance","utils","fromWei","ethBalance","className","style","display","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ysBA0FeA,MAnFf,WAYE,IAAIC,EAXJC,oBAAS,sBAAE,sBAAAC,EAAA,sEACcC,MADd,eAETH,EAAO,IAAII,IAAKC,OAAOC,WAClBC,gBAAgBC,GAAG,kBAAxB,sBAA2C,4BAAAN,EAAA,sEACpBF,EAAKS,IAAIC,cADW,OACrCC,EADqC,OAEzCC,EAAYD,GAF6B,4CAK3CE,QAAQC,KAAKH,EAAS,gCARb,4CAYX,MAA+BI,mBAAS,IAAxC,mBAAOJ,EAAP,KAAgBC,EAAhB,KACA,EAA6BG,qBAA7B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,qBAApC,mBAAOG,EAAP,KAAkBC,EAAlB,KAEAnB,EAAO,IAAII,IAAKC,OAAOC,UAEvB,IAAKc,EAAe,uCAAG,gCAAAlB,EAAA,sEACEC,MADF,cACfG,EADe,gBAECA,EAASe,QAAQ,CAAEC,OAAQ,wBAF5B,cAEfC,EAFe,OAGrBX,EAAYW,EAAQ,IAHC,SAICvB,EAAKS,IAAIe,aAJV,cAIfR,EAJe,OAKrBC,EAAWD,GALU,UAMHhB,EAAKS,IAAIC,cANN,eAOrBG,QAAQY,IAAIzB,EAAKO,gBAAgB,mBAPZ,4CAAH,qDAWhBmB,EAAmB,uCAAG,sBAAAxB,EAAA,sEACjBF,EAAKO,gBAAgBoB,oBADJ,OAEvBC,aAAaC,QACbjB,EAAY,IACZK,EAAW,IACXZ,OAAOyB,SAASC,SALO,2CAAH,qDAQnBC,EAAW,uCAAG,8BAAA9B,EAAA,sEACIF,EAAKS,IAAIS,WAAWP,GADxB,cACZsB,EADY,gBAEOjC,EAAKkC,MAAMC,QAAQF,EAAQ,SAFlC,OAEZG,EAFY,OAGhBjB,EAAeiB,GAHC,2CAAH,qDAOf,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAE0B,qBAAhBhC,OAAOL,KACf,gEAEE,wBAAQsC,MAAO,CAACC,QAAQ,SAAUC,QAASpB,EAA3C,iCAGA,4CACyB,cAAbT,GAA4BA,KAExC,6CACyB,cAAZK,GAA2BA,KAExC,wBAAQsB,MAAO,CAACC,QAAQ,SAAUC,QAASd,EAA3C,uCAGc,KAAbf,GACD,qCACE,wBAAQ2B,MAAO,CAACC,QAAQ,SAAUC,QAASR,EAA3C,kCAGCd,QAML,kCCtEOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e14aa7d3.chunk.js","sourcesContent":["import './App.css';\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport React, { useState,useEffect } from 'react';\r\n\r\n\r\n\r\nfunction App() {\r\n  useEffect( async () => {\r\n    const ethereum = await detectEthereumProvider();\r\n    web3 = new Web3(window.ethereum);\r\n    web3.currentProvider.on(\"accountsChanged\", async function () {\r\n      let accounts = await web3.eth.getAccounts();\r\n      setAccounts(accounts)\r\n      \r\n    });\r\n    console.warn(accounts,'----------------------------');\r\n  })\r\n\r\n  let web3;\r\n  const [accounts,setAccounts] = useState('');\r\n  const [chainid,setChainId] = useState();\r\n  const [getBalance,SetGetBalanced] = useState();\r\n\r\n  web3 = new Web3(window.ethereum);\r\n\r\n  var  metamaskConnect = async () =>{  \r\n    const ethereum = await detectEthereumProvider();\r\n    const account = await ethereum.request({ method: 'eth_requestAccounts' });\r\n    setAccounts(account[0]);\r\n    const chainid = await web3.eth.getChainId();\r\n    setChainId(chainid)\r\n    const acc = await web3.eth.getAccounts()\r\n    console.log(web3.currentProvider,'currentProvider');    \r\n\r\n  }\r\n\r\n  var metaMaskDissconnect = async () => {\r\n     await web3.currentProvider._handleDisconnect();\r\n     localStorage.clear();\r\n     setAccounts('')\r\n     setChainId('')\r\n     window.location.reload();\r\n  }\r\n \r\n  var getBalanced = async () => {\r\n    var balance = await web3.eth.getBalance(accounts) \r\n    var ethBalance = await web3.utils.fromWei(balance,'ether')\r\n    SetGetBalanced(ethBalance);\r\n }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        {typeof window.web3 !== 'undefined' ?  \r\n        <>\r\n          'MetaMask is installed!'\r\n          <button style={{display:'block'}} onClick={metamaskConnect}>\r\n            Connect To MetaMask\r\n          </button>\r\n          <div>\r\n            Address:-{accounts !== 'undefined' && accounts}\r\n          </div>\r\n          <div>\r\n            Chain Id:-{chainid !== 'undefined' && chainid}\r\n          </div>   \r\n          <button style={{display:'block'}} onClick={metaMaskDissconnect}>\r\n            Dissconnect From MetaMask   \r\n          </button> \r\n          {accounts !== '' && \r\n          <>\r\n            <button style={{display:'block'}} onClick={getBalanced}>\r\n              Get Account Balanced  \r\n            </button> \r\n            {getBalance}\r\n              </>\r\n            }   \r\n            {/* Master Commit  */}\r\n        </>\r\n        :\r\n        'MetaMask is not installed!'          \r\n        }\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}